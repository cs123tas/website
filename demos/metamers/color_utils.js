// inlets and outlets
inlets = 1;
outlets = 3;

//global variables
function wavelengthToColor(wavelength) {
    var Gamma = 1.00;
    var IntensityMax = 255;

    var Factor;
    
    // Color values in the range -1 to 1
    var Blue;
    var Green;
    var Red;

    if (wavelength >= 350 && wavelength < 440) {
        // From Purple (1, 0, 1) to Blue (0, 0, 1), with increasing intensity (set below)
        Red    = -(wavelength - 440) / (440 - 350);
        Green = 0.0;
        Blue    = 1.0;
    } else if (wavelength >= 440 && wavelength < 490) {
        // From Blue (0, 0, 1) to Cyan (0, 1, 1) 
        Red    = 0.0;
        Green = (wavelength - 440) / (490 - 440);
        Blue    = 1.0;
        
    } else if (wavelength >= 490 && wavelength < 510) {
        // From  Cyan (0, 1, 1)  to  Green (0, 1, 0) 
        Red = 0.0;
        Green = 1.0;
        Blue = -(wavelength - 510) / (510 - 490);
        
    } else if (wavelength >= 510 && wavelength < 580) { 
        // From  Green (0, 1, 0)  to  Yellow (1, 1, 0)
        Red = (wavelength - 510) / (580 - 510);
        Green = 1.0;
        Blue = 0.0;
        
    } else if (wavelength >= 580 && wavelength < 645) {
        // From  Yellow (1, 1, 0)  to  Red (1, 0, 0)
        Red = 1.0;
        Green = -(wavelength - 645) / (645 - 580);
        Blue = 0.0;
        
    } else if (wavelength >= 645 && wavelength <= 780) {
        // Solid Red (1, 0, 0), with decreasing intensity (set below)
        Red = 1.0;
        Green = 0.0;
        Blue = 0.0;
        
    } else {
        Red = 0.0;
        Green = 0.0;
        Blue = 0.0;
    }
 
     // Intensity factor goes through the range:
    // 0.1 (350-420 nm) 1.0 (420-645 nm) 1.0 (645-780 nm) 0.2
 
    if (wavelength >= 350 && wavelength < 420) {
        Factor = 0.1 + 0.9*(wavelength - 350) / (420 - 350);
        
    } else if (wavelength >= 420 && wavelength < 645) {
        Factor = 1.0;
        
    } else if (wavelength >= 645 && wavelength <= 780) {
        Factor = 0.2 + 0.8*(780 - wavelength) / (780 - 645);
        
    } else {
        Factor = 0.0;
    }

    var R = factorAdjust (Red, Factor, IntensityMax, Gamma);
    var G = factorAdjust (Green, Factor, IntensityMax, Gamma);
    var B = factorAdjust (Blue, Factor, IntensityMax, Gamma);

    //return Color.FromArgb(R, G, B);
    //return "R:" + R + ", G:" + G + ", B:" + B;
    return h2d("" + d2h (R,2) + d2h (G,2) + d2h (B,2));
}

function factorAdjust (color, factor, intensityMax, gamma) {
    
    if (color == 0.0) {
        return 0;
    } else {
        return Math.round (intensityMax * Math.pow (color * factor, gamma));
    }
}

// Convert a decimal number into hex as a string.
// The optional minCharacters gives the minimum number of characters to return.
// The result is left-padded with "0" (zeros) to fill ou the string as needed.

function d2h (d, minChars) {
    var result;

    result = d.toString(16);

    while (result.length < minChars) {
        result = "0" + result;
    }
    return result;
}

function h2d (h) {
    return parseInt(h,16);


} 


cmf_red = [
0.0247,
0.0245,
0.0243,
0.0241,
0.0239,
0.0237,
0.02346,
0.02322,
0.02298,
0.02274,
0.0225,
0.02214,
0.02178,
0.02142,
0.02106,
0.0207,
0.02018,
0.01966,
0.01914,
0.01862,
0.0181,
0.01732,
0.01654,
0.01576,
0.01498,
0.0142,
0.01312,
0.01204,
0.01096,
0.00988,
0.0088,
0.00728,
0.00576,
0.00424,
0.00272,
0.0012,
-0.00072,
-0.00264,
-0.00456,
-0.00648,
-0.0084,
-0.01098,
-0.01356,
-0.01614,
-0.01872,
-0.0213,
-0.02484,
-0.02838,
-0.03192,
-0.03546,
-0.039,
-0.04356,
-0.04812,
-0.05268,
-0.05724,
-0.0618,
-0.06762,
-0.07344,
-0.07926,
-0.08508,
-0.0909,
-0.09834,
-0.10578,
-0.11322,
-0.12066,
-0.1281,
-0.1389,
-0.1497,
-0.1605,
-0.1713,
-0.1821,
-0.19736,
-0.21262,
-0.22788,
-0.24314,
-0.2584,
-0.28006,
-0.30172,
-0.32338,
-0.34504,
-0.3667,
-0.39736,
-0.42802,
-0.45868,
-0.48934,
-0.52,
-0.559,
-0.598,
-0.637,
-0.676,
-0.715,
-0.76118,
-0.80736,
-0.85354,
-0.89972,
-0.9459,
-0.99042,
-1.03494,
-1.07946,
-1.12398,
-1.1685,
-1.19844,
-1.22838,
-1.25832,
-1.28826,
-1.3182,
-1.32198,
-1.32576,
-1.32954,
-1.33332,
-1.3371,
-1.3112,
-1.2853,
-1.2594,
-1.2335,
-1.2076,
-1.16268,
-1.11776,
-1.07284,
-1.02792,
-0.983,
-0.93412,
-0.88524,
-0.83636,
-0.78748,
-0.7386,
-0.69406,
-0.64952,
-0.60498,
-0.56044,
-0.5159,
-0.4788,
-0.4417,
-0.4046,
-0.3675,
-0.3304,
-0.29846,
-0.26652,
-0.23458,
-0.20264,
-0.1707,
-0.14242,
-0.11414,
-0.08586,
-0.05758,
-0.0293,
-0.00396,
0.02138,
0.04672,
0.07206,
0.0974,
0.12034,
0.14328,
0.16622,
0.18916,
0.2121,
0.23296,
0.25382,
0.27468,
0.29554,
0.3164,
0.33536,
0.35432,
0.37328,
0.39224,
0.4112,
0.42842,
0.44564,
0.46286,
0.48008,
0.4973,
0.51286,
0.52842,
0.54398,
0.55954,
0.5751,
0.58906,
0.60302,
0.61698,
0.63094,
0.6449,
0.65734,
0.66978,
0.68222,
0.69466,
0.7071,
0.71802,
0.72894,
0.73986,
0.75078,
0.7617,
0.7711,
0.7805,
0.7899,
0.7993,
0.8087,
0.81646,
0.82422,
0.83198,
0.83974,
0.8475,
0.854,
0.8605,
0.867,
0.8735,
0.88,
0.88518,
0.89036,
0.89554,
0.90072,
0.9059,
0.91002,
0.91414,
0.91826,
0.92238,
0.9265,
0.9297,
0.9329,
0.9361,
0.9393,
0.9425,
0.945,
0.9475,
0.95,
0.9525,
0.955,
0.95698,
0.95896,
0.96094,
0.96292,
0.9649,
0.96652,
0.96814,
0.96976,
0.97138,
0.973,
0.97434,
0.97568,
0.97702,
0.97836,
0.9797,
0.98076,
0.98182,
0.98288,
0.98394,
0.985,
0.98576,
0.98652,
0.98728,
0.98804,
0.9888,
0.9894,
0.99,
0.9906,
0.9912,
0.9918,
0.99224,
0.99268,
0.99312,
0.99356,
0.994,
0.99428,
0.99456,
0.99484,
0.99512,
0.9954,
0.99564,
0.99588,
0.99612,
0.99636,
0.9966,
0.99678,
0.99696,
0.99714,
0.99732,
0.9975,
0.99768,
0.99786,
0.99804,
0.99822,
0.9984,
0.99854,
0.99868,
0.99882,
0.99896,
0.9991,
0.9992,
0.9993,
0.9994,
0.9995,
0.9996,
0.99966,
0.99972,
0.99978,
0.99984,
0.9999,
0.99992,
0.99994,
0.99996,
0.99998,
1
];

cmf_green = [
-0.0112,
-0.01118,
-0.01116,
-0.01114,
-0.01112,
-0.0111,
-0.01106,
-0.01102,
-0.01098,
-0.01094,
-0.0109,
-0.0108,
-0.0107,
-0.0106,
-0.0105,
-0.0104,
-0.0102,
-0.01,
-0.0098,
-0.0096,
-0.0094,
-0.00904,
-0.00868,
-0.00832,
-0.00796,
-0.0076,
-0.00704,
-0.00648,
-0.00592,
-0.00536,
-0.0048,
-0.00398,
-0.00316,
-0.00234,
-0.00152,
-0.0007,
0.0004,
0.0015,
0.0026,
0.0037,
0.0048,
0.00624,
0.00768,
0.00912,
0.01056,
0.012,
0.01396,
0.01592,
0.01788,
0.01984,
0.0218,
0.02434,
0.02688,
0.02942,
0.03196,
0.0345,
0.03794,
0.04138,
0.04482,
0.04826,
0.0517,
0.0566,
0.0615,
0.0664,
0.0713,
0.0762,
0.08446,
0.09272,
0.10098,
0.10924,
0.1175,
0.1308,
0.1441,
0.1574,
0.1707,
0.184,
0.20532,
0.22664,
0.24796,
0.26928,
0.2906,
0.32384,
0.35708,
0.39032,
0.42356,
0.4568,
0.50536,
0.55392,
0.60248,
0.65104,
0.6996,
0.76462,
0.82964,
0.89466,
0.95968,
1.0247,
1.09786,
1.17102,
1.24418,
1.31734,
1.3905,
1.4563,
1.5221,
1.5879,
1.6537,
1.7195,
1.76196,
1.80442,
1.84688,
1.88934,
1.9318,
1.93942,
1.94704,
1.95466,
1.96228,
1.9699,
1.9466,
1.9233,
1.9,
1.8767,
1.8534,
1.81596,
1.77852,
1.74108,
1.70364,
1.6662,
1.62818,
1.59016,
1.55214,
1.51412,
1.4761,
1.44298,
1.40986,
1.37674,
1.34362,
1.3105,
1.28096,
1.25142,
1.22188,
1.19234,
1.1628,
1.13588,
1.10896,
1.08204,
1.05512,
1.0282,
1.00358,
0.97896,
0.95434,
0.92972,
0.9051,
0.88246,
0.85982,
0.83718,
0.81454,
0.7919,
0.77114,
0.75038,
0.72962,
0.70886,
0.6881,
0.66912,
0.65014,
0.63116,
0.61218,
0.5932,
0.5759,
0.5586,
0.5413,
0.524,
0.5067,
0.49102,
0.47534,
0.45966,
0.44398,
0.4283,
0.41422,
0.40014,
0.38606,
0.37198,
0.3579,
0.34536,
0.33282,
0.32028,
0.30774,
0.2952,
0.2842,
0.2732,
0.2622,
0.2512,
0.2402,
0.23072,
0.22124,
0.21176,
0.20228,
0.1928,
0.18498,
0.17716,
0.16934,
0.16152,
0.1537,
0.14714,
0.14058,
0.13402,
0.12746,
0.1209,
0.1157,
0.1105,
0.1053,
0.1001,
0.0949,
0.09074,
0.08658,
0.08242,
0.07826,
0.0741,
0.07088,
0.06766,
0.06444,
0.06122,
0.058,
0.05548,
0.05296,
0.05044,
0.04792,
0.0454,
0.0434,
0.0414,
0.0394,
0.0374,
0.0354,
0.03376,
0.03212,
0.03048,
0.02884,
0.0272,
0.02586,
0.02452,
0.02318,
0.02184,
0.0205,
0.01944,
0.01838,
0.01732,
0.01626,
0.0152,
0.01442,
0.01364,
0.01286,
0.01208,
0.0113,
0.0107,
0.0101,
0.0095,
0.0089,
0.0083,
0.00786,
0.00742,
0.00698,
0.00654,
0.0061,
0.00582,
0.00554,
0.00526,
0.00498,
0.0047,
0.00446,
0.00422,
0.00398,
0.00374,
0.0035,
0.0033,
0.0031,
0.0029,
0.0027,
0.0025,
0.00232,
0.00214,
0.00196,
0.00178,
0.0016,
0.00146,
0.00132,
0.00118,
0.00104,
0.0009,
0.0008,
0.0007,
0.0006,
0.0005,
0.0004,
0.00034,
0.00028,
0.00022,
0.00016,
0.0001,
0.000008,
0.000006,
0.000004,
0.000002,
0
];

cmf_blue = [
0.9865,
0.98668,
0.98686,
0.98704,
0.98722,
0.9874,
0.9876,
0.9878,
0.988,
0.9882,
0.9884,
0.98866,
0.98892,
0.98918,
0.98944,
0.9897,
0.99002,
0.99034,
0.99066,
0.99098,
0.9913,
0.99172,
0.99214,
0.99256,
0.99298,
0.9934,
0.99392,
0.99444,
0.99496,
0.99548,
0.996,
0.9967,
0.9974,
0.9981,
0.9988,
0.9995,
1.00032,
1.00114,
1.00196,
1.00278,
1.0036,
1.00474,
1.00588,
1.00702,
1.00816,
1.0093,
1.01088,
1.01246,
1.01404,
1.01562,
1.0172,
1.01922,
1.02124,
1.02326,
1.02528,
1.0273,
1.02968,
1.03206,
1.03444,
1.03682,
1.0392,
1.04174,
1.04428,
1.04682,
1.04936,
1.0519,
1.05444,
1.05698,
1.05952,
1.06206,
1.0646,
1.06656,
1.06852,
1.07048,
1.07244,
1.0744,
1.07474,
1.07508,
1.07542,
1.07576,
1.0761,
1.07352,
1.07094,
1.06836,
1.06578,
1.0632,
1.05364,
1.04408,
1.03452,
1.02496,
1.0154,
0.99656,
0.97772,
0.95888,
0.94004,
0.9212,
0.89256,
0.86392,
0.83528,
0.80664,
0.778,
0.74214,
0.70628,
0.67042,
0.63456,
0.5987,
0.56002,
0.52134,
0.48266,
0.44398,
0.4053,
0.37178,
0.33826,
0.30474,
0.27122,
0.2377,
0.21608,
0.19446,
0.17284,
0.15122,
0.1296,
0.11816,
0.10672,
0.09528,
0.08384,
0.0724,
0.06588,
0.05936,
0.05284,
0.04632,
0.0398,
0.03582,
0.03184,
0.02786,
0.02388,
0.0199,
0.0175,
0.0151,
0.0127,
0.0103,
0.0079,
0.00654,
0.00518,
0.00382,
0.00246,
0.0011,
0.00038,
-0.00034,
-0.00106,
-0.00178,
-0.0025,
-0.0028,
-0.0031,
-0.0034,
-0.0037,
-0.004,
-0.0041,
-0.0042,
-0.0043,
-0.0044,
-0.0045,
-0.00448,
-0.00446,
-0.00444,
-0.00442,
-0.0044,
-0.00432,
-0.00424,
-0.00416,
-0.00408,
-0.004,
-0.00388,
-0.00376,
-0.00364,
-0.00352,
-0.0034,
-0.00328,
-0.00316,
-0.00304,
-0.00292,
-0.0028,
-0.0027,
-0.0026,
-0.0025,
-0.0024,
-0.0023,
-0.00222,
-0.00214,
-0.00206,
-0.00198,
-0.0019,
-0.00182,
-0.00174,
-0.00166,
-0.00158,
-0.0015,
-0.00144,
-0.00138,
-0.00132,
-0.00126,
-0.0012,
-0.00114,
-0.00108,
-0.00102,
-0.00096,
-0.0009,
-0.00088,
-0.00086,
-0.00084,
-0.00082,
-0.0008,
-0.00076,
-0.00072,
-0.00068,
-0.00064,
-0.0006,
-0.00058,
-0.00056,
-0.00054,
-0.00052,
-0.0005,
-0.00048,
-0.00046,
-0.00044,
-0.00042,
-0.0004,
-0.00038,
-0.00036,
-0.00034,
-0.00032,
-0.0003,
-0.00028,
-0.00026,
-0.00024,
-0.00022,
-0.0002,
-0.0002,
-0.0002,
-0.0002,
-0.0002,
-0.0002,
-0.0002,
-0.0002,
-0.0002,
-0.0002,
-0.0002,
-0.00018,
-0.00016,
-0.00014,
-0.00012,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
-0.0001,
0.000008,
0.000006,
0.000004,
0.000002,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
];

function cmf_response(cmf, p) {
  sum = 0;
  cmf_sum = 0;

  for(var i = 0; i < cmf.length; i += 1) {
    if(cmf[i] > 0) {
      sum += cmf[i] * p[i];
      cmf_sum += cmf[i];
    }
  }

  return sum / cmf_sum;
}
